{"version":3,"sources":["getTime.js","App.js","serviceWorker.js","index.js"],"names":["calcTime","city","offset","d","Date","utc","getTime","getTimezoneOffset","toLocaleString","value","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveRef","ref","newRefList","state","refList","push","setState","handleClick","e","console","log","find","x","target","name","time","selected","forEach","ele","innerText","tranlateObject","width","concat","offsetWidth","left","offsetLeft","cities","section","label","transform","_this2","react_default","a","createElement","className","map","key","onClick","style","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAUiBA,MAVjB,SAAkBC,EAAMC,GACpB,IAAIC,EAAI,IAAIC,KAERC,EAAMF,EAAEG,UAAoC,IAAxBH,EAAEI,oBAI1B,MAAO,qBAAuBN,EAAO,OAF5B,IAAIG,KAAKC,EAAM,KAAUH,GAEeM,kBCH/CN,EAAS,CACb,CAAED,KAAM,YAAaQ,MAAO,MAC5B,CAAER,KAAM,gBAAiBQ,MAAO,MAChC,CAAER,KAAM,SAAUQ,MAAO,MACzB,CAAER,KAAM,YAAaQ,MAAO,MAC5B,CAAER,KAAM,QAASQ,MAAO,MACxB,CAAER,KAAM,YAAaQ,MAAO,MAC5B,CAAER,KAAM,SAAUQ,MAAO,QAsFZC,cAlFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA0BRQ,QAAU,SAAAC,GACR,IAAIC,EAAaT,EAAKU,MAAMC,QAC5BF,EAAWG,KAAKJ,GAChBR,EAAKa,SAAS,CAAEF,QAASF,KA9BRT,EAiCnBc,YAAc,SAAAC,GACZC,QAAQC,IAAI3B,EAAO4B,KAAK,SAAAC,GAAC,OAAIA,EAAE9B,OAAS0B,EAAEK,OAAOC,OAAMxB,OACvDG,EAAKa,SAAS,CACZS,KAAMlC,EACJ2B,EAAEK,OAAOC,KACT/B,EAAO4B,KAAK,SAAAC,GAAC,OAAIA,EAAE9B,OAAS0B,EAAEK,OAAOC,OAAMxB,SAG/CG,EAAKa,SAAS,CAAEU,SAAUR,EAAEK,OAAOC,OACnCrB,EAAKU,MAAMC,QAAQa,QAAQ,SAAAC,GACrBA,EAAIC,YAAcX,EAAEK,OAAOC,MAC7BrB,EAAKa,SAAS,CACZc,eAAgB,CACdC,MAAK,GAAAC,OAAKJ,EAAIK,YAAT,MACLC,KAAI,GAAAF,OAAKJ,EAAIO,WAAT,YA7CZhC,EAAKU,MAAQ,CACXuB,OAAQ,CACN,CAAEC,QAAS,YAAaC,MAAO,aAC/B,CAAED,QAAS,gBAAiBC,MAAO,iBACnC,CAAED,QAAS,SAAUC,MAAO,UAC5B,CAAED,QAAS,YAAaC,MAAO,aAC/B,CAAED,QAAS,QAASC,MAAO,SAC3B,CAAED,QAAS,YAAaC,MAAO,aAC/B,CAAED,QAAS,SAAUC,MAAO,WAE9BxB,QAAS,GACTgB,eAAgB,CACdC,MAAO,GACPG,KAAM,GACNK,UAAW,IAEbb,SAAU,GACVD,KAAM,IAnBStB,mFAwBjBgB,QAAQC,IAAId,KAAKO,MAAMC,0CA8BhB,IAAA0B,EAAAlC,KACP,OACEmC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UACGrC,KAAKO,MAAMuB,OAAOS,IAAI,SAAArD,GACrB,OACEiD,EAAAC,EAAAC,cAAA,MAAIG,IAAKtD,EAAK8C,OACZG,EAAAC,EAAAC,cAAA,KACEhC,IAAK6B,EAAK9B,QACVqC,QAASP,EAAKvB,YACdO,KAAMhC,EAAK8C,MACXU,MAAO,CACLC,MAAOT,EAAK3B,MAAMa,WAAalC,EAAK8C,MAAQ,QAAU,KAGvD9C,EAAK8C,UAKdG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaI,MAAO1C,KAAKO,MAAMiB,kBAE/CW,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAAEC,MAAO,SAAW3C,KAAKO,MAAMY,cA7EjCyB,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.855e9b2d.chunk.js","sourcesContent":["function calcTime(city, offset) {\n    let d = new Date();\n  \n    let utc = d.getTime() + d.getTimezoneOffset() * 60000;\n  \n    let nd = new Date(utc + 3600000 * offset);\n  \n    return \"The local time in \" + city + \" is \" + nd.toLocaleString();\n  }\n  \n  export default calcTime;\n  ","import React, { Component } from 'react';\nimport './App.css';\nimport calcTime from './getTime';\n\nconst offset = [\n  { city: \"Cupertino\", value: \"-8\" },\n  { city: \"New York City\", value: \"-5\" },\n  { city: \"London\", value: \"+1\" },\n  { city: \"Amsterdam\", value: \"+1\" },\n  { city: \"Tokyo\", value: \"+9\" },\n  { city: \"Hong Kong\", value: \"+8\" },\n  { city: \"Sydney\", value: \"+11\" }\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cities: [\n        { section: \"cupertino\", label: \"Cupertino\" },\n        { section: \"new-york-city\", label: \"New York City\" },\n        { section: \"london\", label: \"London\" },\n        { section: \"amsterdam\", label: \"Amsterdam\" },\n        { section: \"tokyo\", label: \"Tokyo\" },\n        { section: \"hong-kong\", label: \"Hong Kong\" },\n        { section: \"sydney\", label: \"Sydney\" }\n      ],\n      refList: [],\n      tranlateObject: {\n        width: \"\",\n        left: \"\",\n        transform: \"\"\n      },\n      selected: \"\",\n      time: \"\"\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.state.refList);\n  }\n\n  saveRef = ref => {\n    let newRefList = this.state.refList;\n    newRefList.push(ref);\n    this.setState({ refList: newRefList });\n  };\n\n  handleClick = e => {\n    console.log(offset.find(x => x.city === e.target.name).value);\n    this.setState({\n      time: calcTime(\n        e.target.name,\n        offset.find(x => x.city === e.target.name).value\n      )\n    });\n    this.setState({ selected: e.target.name });\n    this.state.refList.forEach(ele => {\n      if (ele.innerText === e.target.name) {\n        this.setState({\n          tranlateObject: {\n            width: `${ele.offsetWidth}px`,\n            left: `${ele.offsetLeft}px`\n          }\n        });\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ul>\n          {this.state.cities.map(city => {\n            return (\n              <li key={city.label}>\n                <a\n                  ref={this.saveRef}\n                  onClick={this.handleClick}\n                  name={city.label}\n                  style={{\n                    color: this.state.selected === city.label ? \"black\" : \"\"\n                  }}\n                >\n                  {city.label}\n                </a>\n              </li>\n            );\n          })}\n          <li className=\"bottomline\" style={this.state.tranlateObject} />\n        </ul>\n        <div style={{ color: \"gray\" }}>{this.state.time}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}